/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.mastercard.fcspr.types.SourceDevice;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SourceDevice extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8517993634255269264L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SourceDevice\",\"namespace\":\"com.mastercard.fcspr.types.SourceDevice\",\"fields\":[{\"name\":\"Id\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"Type\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"IpAddress\",\"type\":\"string\",\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence Id;
  @Deprecated public java.lang.CharSequence Type;
  @Deprecated public java.lang.CharSequence IpAddress;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SourceDevice() {}

  /**
   * All-args constructor.
   * @param Id The new value for Id
   * @param Type The new value for Type
   * @param IpAddress The new value for IpAddress
   */
  public SourceDevice(java.lang.CharSequence Id, java.lang.CharSequence Type, java.lang.CharSequence IpAddress) {
    this.Id = Id;
    this.Type = Type;
    this.IpAddress = IpAddress;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Id;
    case 1: return Type;
    case 2: return IpAddress;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Id = (java.lang.CharSequence)value$; break;
    case 1: Type = (java.lang.CharSequence)value$; break;
    case 2: IpAddress = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'Id' field.
   * @return The value of the 'Id' field.
   */
  public java.lang.CharSequence getId() {
    return Id;
  }

  /**
   * Sets the value of the 'Id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.Id = value;
  }

  /**
   * Gets the value of the 'Type' field.
   * @return The value of the 'Type' field.
   */
  public java.lang.CharSequence getType() {
    return Type;
  }

  /**
   * Sets the value of the 'Type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.Type = value;
  }

  /**
   * Gets the value of the 'IpAddress' field.
   * @return The value of the 'IpAddress' field.
   */
  public java.lang.CharSequence getIpAddress() {
    return IpAddress;
  }

  /**
   * Sets the value of the 'IpAddress' field.
   * @param value the value to set.
   */
  public void setIpAddress(java.lang.CharSequence value) {
    this.IpAddress = value;
  }

  /**
   * Creates a new SourceDevice RecordBuilder.
   * @return A new SourceDevice RecordBuilder
   */
  public static com.mastercard.fcspr.types.SourceDevice.SourceDevice.Builder newBuilder() {
    return new com.mastercard.fcspr.types.SourceDevice.SourceDevice.Builder();
  }

  /**
   * Creates a new SourceDevice RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SourceDevice RecordBuilder
   */
  public static com.mastercard.fcspr.types.SourceDevice.SourceDevice.Builder newBuilder(com.mastercard.fcspr.types.SourceDevice.SourceDevice.Builder other) {
    return new com.mastercard.fcspr.types.SourceDevice.SourceDevice.Builder(other);
  }

  /**
   * Creates a new SourceDevice RecordBuilder by copying an existing SourceDevice instance.
   * @param other The existing instance to copy.
   * @return A new SourceDevice RecordBuilder
   */
  public static com.mastercard.fcspr.types.SourceDevice.SourceDevice.Builder newBuilder(com.mastercard.fcspr.types.SourceDevice.SourceDevice other) {
    return new com.mastercard.fcspr.types.SourceDevice.SourceDevice.Builder(other);
  }

  /**
   * RecordBuilder for SourceDevice instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SourceDevice>
    implements org.apache.avro.data.RecordBuilder<SourceDevice> {

    private java.lang.CharSequence Id;
    private java.lang.CharSequence Type;
    private java.lang.CharSequence IpAddress;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.mastercard.fcspr.types.SourceDevice.SourceDevice.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Id)) {
        this.Id = data().deepCopy(fields()[0].schema(), other.Id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Type)) {
        this.Type = data().deepCopy(fields()[1].schema(), other.Type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.IpAddress)) {
        this.IpAddress = data().deepCopy(fields()[2].schema(), other.IpAddress);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SourceDevice instance
     * @param other The existing instance to copy.
     */
    private Builder(com.mastercard.fcspr.types.SourceDevice.SourceDevice other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.Id)) {
        this.Id = data().deepCopy(fields()[0].schema(), other.Id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Type)) {
        this.Type = data().deepCopy(fields()[1].schema(), other.Type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.IpAddress)) {
        this.IpAddress = data().deepCopy(fields()[2].schema(), other.IpAddress);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'Id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return Id;
    }

    /**
      * Sets the value of the 'Id' field.
      * @param value The value of 'Id'.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.SourceDevice.SourceDevice.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.Id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Id' field has been set.
      * @return True if the 'Id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Id' field.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.SourceDevice.SourceDevice.Builder clearId() {
      Id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Type' field.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return Type;
    }

    /**
      * Sets the value of the 'Type' field.
      * @param value The value of 'Type'.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.SourceDevice.SourceDevice.Builder setType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.Type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Type' field has been set.
      * @return True if the 'Type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Type' field.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.SourceDevice.SourceDevice.Builder clearType() {
      Type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'IpAddress' field.
      * @return The value.
      */
    public java.lang.CharSequence getIpAddress() {
      return IpAddress;
    }

    /**
      * Sets the value of the 'IpAddress' field.
      * @param value The value of 'IpAddress'.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.SourceDevice.SourceDevice.Builder setIpAddress(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.IpAddress = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'IpAddress' field has been set.
      * @return True if the 'IpAddress' field has been set, false otherwise.
      */
    public boolean hasIpAddress() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'IpAddress' field.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.SourceDevice.SourceDevice.Builder clearIpAddress() {
      IpAddress = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public SourceDevice build() {
      try {
        SourceDevice record = new SourceDevice();
        record.Id = fieldSetFlags()[0] ? this.Id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.Type = fieldSetFlags()[1] ? this.Type : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.IpAddress = fieldSetFlags()[2] ? this.IpAddress : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
