/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.mastercard.fcspr.types.Dest;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Dest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2717804973878612L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Dest\",\"namespace\":\"com.mastercard.fcspr.types.Dest\",\"fields\":[{\"name\":\"Id\",\"type\":\"string\"},{\"name\":\"OwningBank\",\"type\":\"string\"},{\"name\":\"OwningBankName\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"SettlingBank\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"SettlingBankName\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"HandlingBank\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"HandlingBankName\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"ActingFor\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"Overseas\",\"type\":\"boolean\",\"default\":false},{\"name\":\"Type\",\"type\":\"string\",\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence Id;
  @Deprecated public java.lang.CharSequence OwningBank;
  @Deprecated public java.lang.CharSequence OwningBankName;
  @Deprecated public java.lang.CharSequence SettlingBank;
  @Deprecated public java.lang.CharSequence SettlingBankName;
  @Deprecated public java.lang.CharSequence HandlingBank;
  @Deprecated public java.lang.CharSequence HandlingBankName;
  @Deprecated public java.lang.CharSequence Name;
  @Deprecated public java.lang.CharSequence ActingFor;
  @Deprecated public boolean Overseas;
  @Deprecated public java.lang.CharSequence Type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Dest() {}

  /**
   * All-args constructor.
   * @param Id The new value for Id
   * @param OwningBank The new value for OwningBank
   * @param OwningBankName The new value for OwningBankName
   * @param SettlingBank The new value for SettlingBank
   * @param SettlingBankName The new value for SettlingBankName
   * @param HandlingBank The new value for HandlingBank
   * @param HandlingBankName The new value for HandlingBankName
   * @param Name The new value for Name
   * @param ActingFor The new value for ActingFor
   * @param Overseas The new value for Overseas
   * @param Type The new value for Type
   */
  public Dest(java.lang.CharSequence Id, java.lang.CharSequence OwningBank, java.lang.CharSequence OwningBankName, java.lang.CharSequence SettlingBank, java.lang.CharSequence SettlingBankName, java.lang.CharSequence HandlingBank, java.lang.CharSequence HandlingBankName, java.lang.CharSequence Name, java.lang.CharSequence ActingFor, java.lang.Boolean Overseas, java.lang.CharSequence Type) {
    this.Id = Id;
    this.OwningBank = OwningBank;
    this.OwningBankName = OwningBankName;
    this.SettlingBank = SettlingBank;
    this.SettlingBankName = SettlingBankName;
    this.HandlingBank = HandlingBank;
    this.HandlingBankName = HandlingBankName;
    this.Name = Name;
    this.ActingFor = ActingFor;
    this.Overseas = Overseas;
    this.Type = Type;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Id;
    case 1: return OwningBank;
    case 2: return OwningBankName;
    case 3: return SettlingBank;
    case 4: return SettlingBankName;
    case 5: return HandlingBank;
    case 6: return HandlingBankName;
    case 7: return Name;
    case 8: return ActingFor;
    case 9: return Overseas;
    case 10: return Type;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Id = (java.lang.CharSequence)value$; break;
    case 1: OwningBank = (java.lang.CharSequence)value$; break;
    case 2: OwningBankName = (java.lang.CharSequence)value$; break;
    case 3: SettlingBank = (java.lang.CharSequence)value$; break;
    case 4: SettlingBankName = (java.lang.CharSequence)value$; break;
    case 5: HandlingBank = (java.lang.CharSequence)value$; break;
    case 6: HandlingBankName = (java.lang.CharSequence)value$; break;
    case 7: Name = (java.lang.CharSequence)value$; break;
    case 8: ActingFor = (java.lang.CharSequence)value$; break;
    case 9: Overseas = (java.lang.Boolean)value$; break;
    case 10: Type = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'Id' field.
   * @return The value of the 'Id' field.
   */
  public java.lang.CharSequence getId() {
    return Id;
  }

  /**
   * Sets the value of the 'Id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.Id = value;
  }

  /**
   * Gets the value of the 'OwningBank' field.
   * @return The value of the 'OwningBank' field.
   */
  public java.lang.CharSequence getOwningBank() {
    return OwningBank;
  }

  /**
   * Sets the value of the 'OwningBank' field.
   * @param value the value to set.
   */
  public void setOwningBank(java.lang.CharSequence value) {
    this.OwningBank = value;
  }

  /**
   * Gets the value of the 'OwningBankName' field.
   * @return The value of the 'OwningBankName' field.
   */
  public java.lang.CharSequence getOwningBankName() {
    return OwningBankName;
  }

  /**
   * Sets the value of the 'OwningBankName' field.
   * @param value the value to set.
   */
  public void setOwningBankName(java.lang.CharSequence value) {
    this.OwningBankName = value;
  }

  /**
   * Gets the value of the 'SettlingBank' field.
   * @return The value of the 'SettlingBank' field.
   */
  public java.lang.CharSequence getSettlingBank() {
    return SettlingBank;
  }

  /**
   * Sets the value of the 'SettlingBank' field.
   * @param value the value to set.
   */
  public void setSettlingBank(java.lang.CharSequence value) {
    this.SettlingBank = value;
  }

  /**
   * Gets the value of the 'SettlingBankName' field.
   * @return The value of the 'SettlingBankName' field.
   */
  public java.lang.CharSequence getSettlingBankName() {
    return SettlingBankName;
  }

  /**
   * Sets the value of the 'SettlingBankName' field.
   * @param value the value to set.
   */
  public void setSettlingBankName(java.lang.CharSequence value) {
    this.SettlingBankName = value;
  }

  /**
   * Gets the value of the 'HandlingBank' field.
   * @return The value of the 'HandlingBank' field.
   */
  public java.lang.CharSequence getHandlingBank() {
    return HandlingBank;
  }

  /**
   * Sets the value of the 'HandlingBank' field.
   * @param value the value to set.
   */
  public void setHandlingBank(java.lang.CharSequence value) {
    this.HandlingBank = value;
  }

  /**
   * Gets the value of the 'HandlingBankName' field.
   * @return The value of the 'HandlingBankName' field.
   */
  public java.lang.CharSequence getHandlingBankName() {
    return HandlingBankName;
  }

  /**
   * Sets the value of the 'HandlingBankName' field.
   * @param value the value to set.
   */
  public void setHandlingBankName(java.lang.CharSequence value) {
    this.HandlingBankName = value;
  }

  /**
   * Gets the value of the 'Name' field.
   * @return The value of the 'Name' field.
   */
  public java.lang.CharSequence getName() {
    return Name;
  }

  /**
   * Sets the value of the 'Name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.Name = value;
  }

  /**
   * Gets the value of the 'ActingFor' field.
   * @return The value of the 'ActingFor' field.
   */
  public java.lang.CharSequence getActingFor() {
    return ActingFor;
  }

  /**
   * Sets the value of the 'ActingFor' field.
   * @param value the value to set.
   */
  public void setActingFor(java.lang.CharSequence value) {
    this.ActingFor = value;
  }

  /**
   * Gets the value of the 'Overseas' field.
   * @return The value of the 'Overseas' field.
   */
  public java.lang.Boolean getOverseas() {
    return Overseas;
  }

  /**
   * Sets the value of the 'Overseas' field.
   * @param value the value to set.
   */
  public void setOverseas(java.lang.Boolean value) {
    this.Overseas = value;
  }

  /**
   * Gets the value of the 'Type' field.
   * @return The value of the 'Type' field.
   */
  public java.lang.CharSequence getType() {
    return Type;
  }

  /**
   * Sets the value of the 'Type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.Type = value;
  }

  /**
   * Creates a new Dest RecordBuilder.
   * @return A new Dest RecordBuilder
   */
  public static com.mastercard.fcspr.types.Dest.Dest.Builder newBuilder() {
    return new com.mastercard.fcspr.types.Dest.Dest.Builder();
  }

  /**
   * Creates a new Dest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Dest RecordBuilder
   */
  public static com.mastercard.fcspr.types.Dest.Dest.Builder newBuilder(com.mastercard.fcspr.types.Dest.Dest.Builder other) {
    return new com.mastercard.fcspr.types.Dest.Dest.Builder(other);
  }

  /**
   * Creates a new Dest RecordBuilder by copying an existing Dest instance.
   * @param other The existing instance to copy.
   * @return A new Dest RecordBuilder
   */
  public static com.mastercard.fcspr.types.Dest.Dest.Builder newBuilder(com.mastercard.fcspr.types.Dest.Dest other) {
    return new com.mastercard.fcspr.types.Dest.Dest.Builder(other);
  }

  /**
   * RecordBuilder for Dest instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Dest>
    implements org.apache.avro.data.RecordBuilder<Dest> {

    private java.lang.CharSequence Id;
    private java.lang.CharSequence OwningBank;
    private java.lang.CharSequence OwningBankName;
    private java.lang.CharSequence SettlingBank;
    private java.lang.CharSequence SettlingBankName;
    private java.lang.CharSequence HandlingBank;
    private java.lang.CharSequence HandlingBankName;
    private java.lang.CharSequence Name;
    private java.lang.CharSequence ActingFor;
    private boolean Overseas;
    private java.lang.CharSequence Type;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.mastercard.fcspr.types.Dest.Dest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Id)) {
        this.Id = data().deepCopy(fields()[0].schema(), other.Id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.OwningBank)) {
        this.OwningBank = data().deepCopy(fields()[1].schema(), other.OwningBank);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.OwningBankName)) {
        this.OwningBankName = data().deepCopy(fields()[2].schema(), other.OwningBankName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.SettlingBank)) {
        this.SettlingBank = data().deepCopy(fields()[3].schema(), other.SettlingBank);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.SettlingBankName)) {
        this.SettlingBankName = data().deepCopy(fields()[4].schema(), other.SettlingBankName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.HandlingBank)) {
        this.HandlingBank = data().deepCopy(fields()[5].schema(), other.HandlingBank);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.HandlingBankName)) {
        this.HandlingBankName = data().deepCopy(fields()[6].schema(), other.HandlingBankName);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.Name)) {
        this.Name = data().deepCopy(fields()[7].schema(), other.Name);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.ActingFor)) {
        this.ActingFor = data().deepCopy(fields()[8].schema(), other.ActingFor);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.Overseas)) {
        this.Overseas = data().deepCopy(fields()[9].schema(), other.Overseas);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.Type)) {
        this.Type = data().deepCopy(fields()[10].schema(), other.Type);
        fieldSetFlags()[10] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Dest instance
     * @param other The existing instance to copy.
     */
    private Builder(com.mastercard.fcspr.types.Dest.Dest other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.Id)) {
        this.Id = data().deepCopy(fields()[0].schema(), other.Id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.OwningBank)) {
        this.OwningBank = data().deepCopy(fields()[1].schema(), other.OwningBank);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.OwningBankName)) {
        this.OwningBankName = data().deepCopy(fields()[2].schema(), other.OwningBankName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.SettlingBank)) {
        this.SettlingBank = data().deepCopy(fields()[3].schema(), other.SettlingBank);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.SettlingBankName)) {
        this.SettlingBankName = data().deepCopy(fields()[4].schema(), other.SettlingBankName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.HandlingBank)) {
        this.HandlingBank = data().deepCopy(fields()[5].schema(), other.HandlingBank);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.HandlingBankName)) {
        this.HandlingBankName = data().deepCopy(fields()[6].schema(), other.HandlingBankName);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.Name)) {
        this.Name = data().deepCopy(fields()[7].schema(), other.Name);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.ActingFor)) {
        this.ActingFor = data().deepCopy(fields()[8].schema(), other.ActingFor);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.Overseas)) {
        this.Overseas = data().deepCopy(fields()[9].schema(), other.Overseas);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.Type)) {
        this.Type = data().deepCopy(fields()[10].schema(), other.Type);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'Id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return Id;
    }

    /**
      * Sets the value of the 'Id' field.
      * @param value The value of 'Id'.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.Dest.Dest.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.Id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Id' field has been set.
      * @return True if the 'Id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Id' field.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.Dest.Dest.Builder clearId() {
      Id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'OwningBank' field.
      * @return The value.
      */
    public java.lang.CharSequence getOwningBank() {
      return OwningBank;
    }

    /**
      * Sets the value of the 'OwningBank' field.
      * @param value The value of 'OwningBank'.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.Dest.Dest.Builder setOwningBank(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.OwningBank = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'OwningBank' field has been set.
      * @return True if the 'OwningBank' field has been set, false otherwise.
      */
    public boolean hasOwningBank() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'OwningBank' field.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.Dest.Dest.Builder clearOwningBank() {
      OwningBank = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'OwningBankName' field.
      * @return The value.
      */
    public java.lang.CharSequence getOwningBankName() {
      return OwningBankName;
    }

    /**
      * Sets the value of the 'OwningBankName' field.
      * @param value The value of 'OwningBankName'.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.Dest.Dest.Builder setOwningBankName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.OwningBankName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'OwningBankName' field has been set.
      * @return True if the 'OwningBankName' field has been set, false otherwise.
      */
    public boolean hasOwningBankName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'OwningBankName' field.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.Dest.Dest.Builder clearOwningBankName() {
      OwningBankName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'SettlingBank' field.
      * @return The value.
      */
    public java.lang.CharSequence getSettlingBank() {
      return SettlingBank;
    }

    /**
      * Sets the value of the 'SettlingBank' field.
      * @param value The value of 'SettlingBank'.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.Dest.Dest.Builder setSettlingBank(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.SettlingBank = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'SettlingBank' field has been set.
      * @return True if the 'SettlingBank' field has been set, false otherwise.
      */
    public boolean hasSettlingBank() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'SettlingBank' field.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.Dest.Dest.Builder clearSettlingBank() {
      SettlingBank = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'SettlingBankName' field.
      * @return The value.
      */
    public java.lang.CharSequence getSettlingBankName() {
      return SettlingBankName;
    }

    /**
      * Sets the value of the 'SettlingBankName' field.
      * @param value The value of 'SettlingBankName'.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.Dest.Dest.Builder setSettlingBankName(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.SettlingBankName = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'SettlingBankName' field has been set.
      * @return True if the 'SettlingBankName' field has been set, false otherwise.
      */
    public boolean hasSettlingBankName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'SettlingBankName' field.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.Dest.Dest.Builder clearSettlingBankName() {
      SettlingBankName = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'HandlingBank' field.
      * @return The value.
      */
    public java.lang.CharSequence getHandlingBank() {
      return HandlingBank;
    }

    /**
      * Sets the value of the 'HandlingBank' field.
      * @param value The value of 'HandlingBank'.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.Dest.Dest.Builder setHandlingBank(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.HandlingBank = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'HandlingBank' field has been set.
      * @return True if the 'HandlingBank' field has been set, false otherwise.
      */
    public boolean hasHandlingBank() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'HandlingBank' field.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.Dest.Dest.Builder clearHandlingBank() {
      HandlingBank = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'HandlingBankName' field.
      * @return The value.
      */
    public java.lang.CharSequence getHandlingBankName() {
      return HandlingBankName;
    }

    /**
      * Sets the value of the 'HandlingBankName' field.
      * @param value The value of 'HandlingBankName'.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.Dest.Dest.Builder setHandlingBankName(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.HandlingBankName = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'HandlingBankName' field has been set.
      * @return True if the 'HandlingBankName' field has been set, false otherwise.
      */
    public boolean hasHandlingBankName() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'HandlingBankName' field.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.Dest.Dest.Builder clearHandlingBankName() {
      HandlingBankName = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'Name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return Name;
    }

    /**
      * Sets the value of the 'Name' field.
      * @param value The value of 'Name'.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.Dest.Dest.Builder setName(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.Name = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'Name' field has been set.
      * @return True if the 'Name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'Name' field.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.Dest.Dest.Builder clearName() {
      Name = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'ActingFor' field.
      * @return The value.
      */
    public java.lang.CharSequence getActingFor() {
      return ActingFor;
    }

    /**
      * Sets the value of the 'ActingFor' field.
      * @param value The value of 'ActingFor'.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.Dest.Dest.Builder setActingFor(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.ActingFor = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'ActingFor' field has been set.
      * @return True if the 'ActingFor' field has been set, false otherwise.
      */
    public boolean hasActingFor() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'ActingFor' field.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.Dest.Dest.Builder clearActingFor() {
      ActingFor = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'Overseas' field.
      * @return The value.
      */
    public java.lang.Boolean getOverseas() {
      return Overseas;
    }

    /**
      * Sets the value of the 'Overseas' field.
      * @param value The value of 'Overseas'.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.Dest.Dest.Builder setOverseas(boolean value) {
      validate(fields()[9], value);
      this.Overseas = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'Overseas' field has been set.
      * @return True if the 'Overseas' field has been set, false otherwise.
      */
    public boolean hasOverseas() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'Overseas' field.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.Dest.Dest.Builder clearOverseas() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'Type' field.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return Type;
    }

    /**
      * Sets the value of the 'Type' field.
      * @param value The value of 'Type'.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.Dest.Dest.Builder setType(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.Type = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'Type' field has been set.
      * @return True if the 'Type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'Type' field.
      * @return This builder.
      */
    public com.mastercard.fcspr.types.Dest.Dest.Builder clearType() {
      Type = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    public Dest build() {
      try {
        Dest record = new Dest();
        record.Id = fieldSetFlags()[0] ? this.Id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.OwningBank = fieldSetFlags()[1] ? this.OwningBank : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.OwningBankName = fieldSetFlags()[2] ? this.OwningBankName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.SettlingBank = fieldSetFlags()[3] ? this.SettlingBank : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.SettlingBankName = fieldSetFlags()[4] ? this.SettlingBankName : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.HandlingBank = fieldSetFlags()[5] ? this.HandlingBank : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.HandlingBankName = fieldSetFlags()[6] ? this.HandlingBankName : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.Name = fieldSetFlags()[7] ? this.Name : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.ActingFor = fieldSetFlags()[8] ? this.ActingFor : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.Overseas = fieldSetFlags()[9] ? this.Overseas : (java.lang.Boolean) defaultValue(fields()[9]);
        record.Type = fieldSetFlags()[10] ? this.Type : (java.lang.CharSequence) defaultValue(fields()[10]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
